import chalk from 'chalk';
import { format } from 'date-fns';

export class Logger {
	private static instance: Logger;

	private constructor() { }

	public static getInstance(): Logger {
		if (!Logger.instance) {
			Logger.instance = new Logger();
		}
		return Logger.instance;
	}

	private getTimestamp(): string {
		return chalk.dim(`[${format(new Date(), 'HH:mm:ss')}]`);
	}

	public success(message: string, category?: string): void {
		const prefix = chalk.green('‚úî SUCCESS');
		const cat = category ? chalk.green(`[${category}]`) : '';
		console.log(`${this.getTimestamp()} ${prefix} ${cat} ${message}`);
	}

	public error(message: string, category?: string): void {
		const prefix = chalk.red('‚úñ ERROR');
		const cat = category ? chalk.red(`[${category}]`) : '';
		console.log(`${this.getTimestamp()} ${prefix} ${cat} ${message}`);
	}

	public warning(message: string, category?: string): void {
		const prefix = chalk.yellow('‚ö† WARNING');
		const cat = category ? chalk.yellow(`[${category}]`) : '';
		console.log(`${this.getTimestamp()} ${prefix} ${cat} ${message}`);
	}

	public info(message: string, category?: string): void {
		const prefix = chalk.blue('‚Ñπ INFO');
		const cat = category ? chalk.blue(`[${category}]`) : '';
		console.log(`${this.getTimestamp()} ${prefix} ${cat} ${message}`);
	}

	public debug(message: string, category?: string): void {
		const prefix = chalk.magenta('üîç DEBUG');
		const cat = category ? chalk.magenta(`[${category}]`) : '';
		console.log(`${this.getTimestamp()} ${prefix} ${cat} ${message}`);
	}

	public system(message: string, category?: string): void {
		const prefix = chalk.cyan('‚öô SYSTEM');
		const cat = category ? chalk.cyan(`[${category}]`) : '';
		console.log(`${this.getTimestamp()} ${prefix} ${cat} ${message}`);
	}
	public network(message: string, category?: string): void {
		const prefix = chalk.cyan('üåê NETWORK');
		const cat = category ? chalk.cyan(`[${category}]`) : '';
		console.log(`${this.getTimestamp()} ${prefix} ${cat} ${message}`);
	}

	public security(message: string, category?: string): void {
		const prefix = chalk.red('üîí SECURITY');
		const cat = category ? chalk.red(`[${category}]`) : '';
		console.log(`${this.getTimestamp()} ${prefix} ${cat} ${message}`);
	}

	public database(message: string, category?: string): void {
		const prefix = chalk.blue('üíæ DATABASE');
		const cat = category ? chalk.blue(`[${category}]`) : '';
		console.log(`${this.getTimestamp()} ${prefix} ${cat} ${message}`);
	}

	public performance(message: string, category?: string): void {
		const prefix = chalk.yellow('‚ö° PERFORMANCE');
		const cat = category ? chalk.yellow(`[${category}]`) : '';
		console.log(`${this.getTimestamp()} ${prefix} ${cat} ${message}`);
	}

	public api(message: string, category?: string): void {
		const prefix = chalk.magenta('üîå API');
		const cat = category ? chalk.magenta(`[${category}]`) : '';
		console.log(`${this.getTimestamp()} ${prefix} ${cat} ${message}`);
	}

	public user(message: string, category?: string): void {
		const prefix = chalk.green('üë§ USER');
		const cat = category ? chalk.green(`[${category}]`) : '';
		console.log(`${this.getTimestamp()} ${prefix} ${cat} ${message}`);
	}

	public file(message: string, category?: string): void {
		const prefix = chalk.blue('üìÅ FILE');
		const cat = category ? chalk.blue(`[${category}]`) : '';
		console.log(`${this.getTimestamp()} ${prefix} ${cat} ${message}`);
	}

	public task(message: string, category?: string): void {
		const prefix = chalk.cyan('üîÑ TASK');
		const cat = category ? chalk.cyan(`[${category}]`) : '';
		console.log(`${this.getTimestamp()} ${prefix} ${cat} ${message}`);
	}

	public showStatus(data: {
		version: string,
		osInfo: string,
		uptime: number,
		memory: number,
		currentDirectory: string,
		commandsCount: number
	}): void {
		console.log(chalk.bold('\nüìä Status du Syst√®me\n'));

		// En-t√™te
		this.system(`Terminal Pro ${data.version}`);

		// Informations syst√®me
		this.info(`OS: ${data.osInfo}`, 'System');
		this.info(`Uptime: ${Math.floor(data.uptime / 60)} minutes`, 'System');
		this.info(`M√©moire libre: ${Math.floor(data.memory / 1024 / 1024)}MB`, 'Memory');

		// √âtat des services (exemple)
		this.success('Database: Connected', 'Services');
		this.success('API: Running', 'Services');
		this.warning('Cache: 75% utilis√©', 'Services');

		// Statistiques
		this.info(`Commandes ex√©cut√©es: ${data.commandsCount}`, 'Stats');
		this.info(`R√©pertoire actuel: ${data.currentDirectory}`, 'Stats');

		console.log('\n');
	}

	public showAllExamples(): void {
		console.log(chalk.bold('\nüìã D√©monstration des diff√©rents types de logs:\n'));

		// Logs existants
		this.success('Op√©ration r√©ussie!');
		this.error('Erreur critique!');
		this.warning('Attention!');
		this.info('Information');
		this.debug('Debug message');
		this.system('Message syst√®me');

		// Nouveaux logs
		this.network('Connexion √©tablie');
		this.security('Acc√®s autoris√©');
		this.database('Query ex√©cut√©e');
		this.performance('Temps de r√©ponse: 42ms');
		this.api('API Request');
		this.user('Utilisateur connect√©');
		this.file('Fichier cr√©√©');
		this.task('T√¢che en cours');

		console.log(chalk.dim('\nUtilisez "log <type>" pour voir plus d\'exemples de chaque type'));
		console.log(chalk.dim('Types disponibles: success, error, warning, info, debug, system,'));
		console.log(chalk.dim('network, security, database, performance, api, user, file, task\n'));
	}
	public showTypeExamples(type: string): void {
		switch (type.toLowerCase()) {
			case 'success':
				this.success('Op√©ration r√©ussie!');
				this.success('Fichier cr√©√© avec succ√®s', 'FileSystem');
				this.success('Configuration sauvegard√©e', 'Config');
				break;

			case 'error':
				this.error('Erreur critique!');
				this.error('Fichier non trouv√©', 'FileSystem');
				this.error('Connection refus√©e', 'Network');
				break;

			case 'warning':
				this.warning('Attention!');
				this.warning('Espace disque faible', 'System');
				this.warning('Version obsol√®te', 'Update');
				break;

			case 'info':
				this.info('Information');
				this.info('Synchronisation en cours', 'Sync');
				this.info('Cache mis √† jour', 'Cache');
				break;

			case 'debug':
				this.debug('Variable x = 42');
				this.debug('Loading component...', 'UI');
				this.debug('API response received', 'Network');
				break;

			case 'system':
				this.system('D√©marrage du syst√®me');
				this.system('Service d√©marr√©', 'Service');
				this.system('Maintenance programm√©e', 'Admin');
				break;

			case 'network':
				this.network('Connexion √©tablie');
				this.network('Requ√™te HTTP envoy√©e', 'Request');
				this.network('R√©ponse re√ßue (200 OK)', 'Response');
				break;

			case 'security':
				this.security('Tentative de connexion', 'Auth');
				this.security('Token expir√©', 'JWT');
				this.security('Acc√®s refus√©', 'Permissions');
				break;

			case 'database':
				this.database('Connexion √©tablie', 'MySQL');
				this.database('Query ex√©cut√©e', 'Query');
				this.database('Cache mis √† jour', 'Cache');
				break;

			case 'performance':
				this.performance('Temps de r√©ponse: 42ms', 'API');
				this.performance('Utilisation CPU: 75%', 'System');
				this.performance('M√©moire: 512MB utilis√©s', 'Memory');
				break;

			case 'api':
				this.api('GET /users', 'Request');
				this.api('POST /data', 'Request');
				this.api('Rate limit: 980/1000', 'Limits');
				break;

			case 'user':
				this.user('Connexion r√©ussie', 'Auth');
				this.user('Profil mis √† jour', 'Profile');
				this.user('Session expir√©e', 'Session');
				break;

			case 'file':
				this.file('Fichier cr√©√©: config.json', 'Create');
				this.file('Lecture: data.txt', 'Read');
				this.file('Suppression: temp.tmp', 'Delete');
				break;

			case 'task':
				this.task('D√©marrage de la t√¢che', 'Backup');
				this.task('Progression: 50%', 'Progress');
				this.task('T√¢che termin√©e', 'Complete');
				break;

			default:
				this.showAllExamples();
		}
	}
}

export default Logger;